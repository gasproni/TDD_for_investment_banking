// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `middleware.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.asprotunity.exchange.middleware;

public class Event implements java.lang.Cloneable, java.io.Serializable {
    public String timestampUTC;

    public String security;

    public String currency;

    public double spot;

    public double volatility;

    public Event() {
    }

    public Event(String timestampUTC, String security, String currency, double spot, double volatility) {
        this.timestampUTC = timestampUTC;
        this.security = security;
        this.currency = currency;
        this.spot = spot;
        this.volatility = volatility;
    }

    public boolean
    equals(java.lang.Object rhs) {
        if (this == rhs) {
            return true;
        }
        Event _r = null;
        if (rhs instanceof Event) {
            _r = (Event) rhs;
        }

        if (_r != null) {
            if (timestampUTC != _r.timestampUTC) {
                if (timestampUTC == null || _r.timestampUTC == null || !timestampUTC.equals(_r.timestampUTC)) {
                    return false;
                }
            }
            if (security != _r.security) {
                if (security == null || _r.security == null || !security.equals(_r.security)) {
                    return false;
                }
            }
            if (currency != _r.currency) {
                if (currency == null || _r.currency == null || !currency.equals(_r.currency)) {
                    return false;
                }
            }
            if (spot != _r.spot) {
                return false;
            }
            if (volatility != _r.volatility) {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode() {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::middleware::Event");
        __h = IceInternal.HashUtil.hashAdd(__h, timestampUTC);
        __h = IceInternal.HashUtil.hashAdd(__h, security);
        __h = IceInternal.HashUtil.hashAdd(__h, currency);
        __h = IceInternal.HashUtil.hashAdd(__h, spot);
        __h = IceInternal.HashUtil.hashAdd(__h, volatility);
        return __h;
    }

    public java.lang.Object
    clone() {
        java.lang.Object o = null;
        try {
            o = super.clone();
        } catch (CloneNotSupportedException ex) {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os) {
        __os.writeString(timestampUTC);
        __os.writeString(security);
        __os.writeString(currency);
        __os.writeDouble(spot);
        __os.writeDouble(volatility);
    }

    public void
    __read(IceInternal.BasicStream __is) {
        timestampUTC = __is.readString();
        security = __is.readString();
        currency = __is.readString();
        spot = __is.readDouble();
        volatility = __is.readDouble();
    }

    public static final long serialVersionUID = 6241309435298691176L;
}
