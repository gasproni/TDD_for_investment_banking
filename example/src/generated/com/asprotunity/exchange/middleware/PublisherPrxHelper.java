// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `middleware.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.asprotunity.exchange.middleware;

public final class PublisherPrxHelper extends Ice.ObjectPrxHelperBase implements PublisherPrx {
    private static final String __queryLatestEvent_name = "queryLatestEvent";

    public Event queryLatestEvent(String security) {
        return queryLatestEvent(security, null, false);
    }

    public Event queryLatestEvent(String security, java.util.Map<String, String> __ctx) {
        return queryLatestEvent(security, __ctx, true);
    }

    private Event queryLatestEvent(String security, java.util.Map<String, String> __ctx, boolean __explicitCtx) {
        if (__explicitCtx && __ctx == null) {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryLatestEvent", __ctx);
        int __cnt = 0;
        try {
            while (true) {
                Ice._ObjectDel __delBase = null;
                try {
                    __checkTwowayOnly("queryLatestEvent");
                    __delBase = __getDelegate(false);
                    _PublisherDel __del = (_PublisherDel) __delBase;
                    return __del.queryLatestEvent(security, __ctx, __observer);
                } catch (IceInternal.LocalExceptionWrapper __ex) {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                } catch (Ice.LocalException __ex) {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        } finally {
            if (__observer != null) {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_queryLatestEvent(String security) {
        return begin_queryLatestEvent(security, null, false, null);
    }

    public Ice.AsyncResult begin_queryLatestEvent(String security, java.util.Map<String, String> __ctx) {
        return begin_queryLatestEvent(security, __ctx, true, null);
    }

    public Ice.AsyncResult begin_queryLatestEvent(String security, Ice.Callback __cb) {
        return begin_queryLatestEvent(security, null, false, __cb);
    }

    public Ice.AsyncResult begin_queryLatestEvent(String security, java.util.Map<String, String> __ctx, Ice.Callback __cb) {
        return begin_queryLatestEvent(security, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_queryLatestEvent(String security, Callback_Publisher_queryLatestEvent __cb) {
        return begin_queryLatestEvent(security, null, false, __cb);
    }

    public Ice.AsyncResult begin_queryLatestEvent(String security, java.util.Map<String, String> __ctx, Callback_Publisher_queryLatestEvent __cb) {
        return begin_queryLatestEvent(security, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryLatestEvent(String security, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb) {
        __checkAsyncTwowayOnly(__queryLatestEvent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryLatestEvent_name, __cb);
        try {
            __result.__prepare(__queryLatestEvent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(security);
            __result.__endWriteParams();
            __result.__send(true);
        } catch (Ice.LocalException __ex) {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Event end_queryLatestEvent(Ice.AsyncResult __result) {
        Ice.AsyncResult.__check(__result, this, __queryLatestEvent_name);
        boolean __ok = __result.__wait();
        try {
            if (!__ok) {
                try {
                    __result.__throwUserException();
                } catch (Ice.UserException __ex) {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Event __ret;
            __ret = new Event();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        } catch (Ice.LocalException ex) {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if (__obsv != null) {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __subscribe_name = "subscribe";

    public void subscribe(SubscriberPrx sub) {
        subscribe(sub, null, false);
    }

    public void subscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx) {
        subscribe(sub, __ctx, true);
    }

    private void subscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx, boolean __explicitCtx) {
        if (__explicitCtx && __ctx == null) {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "subscribe", __ctx);
        int __cnt = 0;
        try {
            while (true) {
                Ice._ObjectDel __delBase = null;
                try {
                    __delBase = __getDelegate(false);
                    _PublisherDel __del = (_PublisherDel) __delBase;
                    __del.subscribe(sub, __ctx, __observer);
                    return;
                } catch (IceInternal.LocalExceptionWrapper __ex) {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                } catch (Ice.LocalException __ex) {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        } finally {
            if (__observer != null) {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_subscribe(SubscriberPrx sub) {
        return begin_subscribe(sub, null, false, null);
    }

    public Ice.AsyncResult begin_subscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx) {
        return begin_subscribe(sub, __ctx, true, null);
    }

    public Ice.AsyncResult begin_subscribe(SubscriberPrx sub, Ice.Callback __cb) {
        return begin_subscribe(sub, null, false, __cb);
    }

    public Ice.AsyncResult begin_subscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx, Ice.Callback __cb) {
        return begin_subscribe(sub, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_subscribe(SubscriberPrx sub, Callback_Publisher_subscribe __cb) {
        return begin_subscribe(sub, null, false, __cb);
    }

    public Ice.AsyncResult begin_subscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx, Callback_Publisher_subscribe __cb) {
        return begin_subscribe(sub, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_subscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb) {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __subscribe_name, __cb);
        try {
            __result.__prepare(__subscribe_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            SubscriberPrxHelper.__write(__os, sub);
            __result.__endWriteParams();
            __result.__send(true);
        } catch (Ice.LocalException __ex) {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_subscribe(Ice.AsyncResult __result) {
        __end(__result, __subscribe_name);
    }

    private static final String __unsubscribe_name = "unsubscribe";

    public void unsubscribe(SubscriberPrx sub) {
        unsubscribe(sub, null, false);
    }

    public void unsubscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx) {
        unsubscribe(sub, __ctx, true);
    }

    private void unsubscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx, boolean __explicitCtx) {
        if (__explicitCtx && __ctx == null) {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "unsubscribe", __ctx);
        int __cnt = 0;
        try {
            while (true) {
                Ice._ObjectDel __delBase = null;
                try {
                    __delBase = __getDelegate(false);
                    _PublisherDel __del = (_PublisherDel) __delBase;
                    __del.unsubscribe(sub, __ctx, __observer);
                    return;
                } catch (IceInternal.LocalExceptionWrapper __ex) {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                } catch (Ice.LocalException __ex) {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        } finally {
            if (__observer != null) {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_unsubscribe(SubscriberPrx sub) {
        return begin_unsubscribe(sub, null, false, null);
    }

    public Ice.AsyncResult begin_unsubscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx) {
        return begin_unsubscribe(sub, __ctx, true, null);
    }

    public Ice.AsyncResult begin_unsubscribe(SubscriberPrx sub, Ice.Callback __cb) {
        return begin_unsubscribe(sub, null, false, __cb);
    }

    public Ice.AsyncResult begin_unsubscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx, Ice.Callback __cb) {
        return begin_unsubscribe(sub, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_unsubscribe(SubscriberPrx sub, Callback_Publisher_unsubscribe __cb) {
        return begin_unsubscribe(sub, null, false, __cb);
    }

    public Ice.AsyncResult begin_unsubscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx, Callback_Publisher_unsubscribe __cb) {
        return begin_unsubscribe(sub, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unsubscribe(SubscriberPrx sub, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb) {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unsubscribe_name, __cb);
        try {
            __result.__prepare(__unsubscribe_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            SubscriberPrxHelper.__write(__os, sub);
            __result.__endWriteParams();
            __result.__send(true);
        } catch (Ice.LocalException __ex) {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_unsubscribe(Ice.AsyncResult __result) {
        __end(__result, __unsubscribe_name);
    }

    public static PublisherPrx checkedCast(Ice.ObjectPrx __obj) {
        PublisherPrx __d = null;
        if (__obj != null) {
            if (__obj instanceof PublisherPrx) {
                __d = (PublisherPrx) __obj;
            } else {
                if (__obj.ice_isA(ice_staticId())) {
                    PublisherPrxHelper __h = new PublisherPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PublisherPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx) {
        PublisherPrx __d = null;
        if (__obj != null) {
            if (__obj instanceof PublisherPrx) {
                __d = (PublisherPrx) __obj;
            } else {
                if (__obj.ice_isA(ice_staticId(), __ctx)) {
                    PublisherPrxHelper __h = new PublisherPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PublisherPrx checkedCast(Ice.ObjectPrx __obj, String __facet) {
        PublisherPrx __d = null;
        if (__obj != null) {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try {
                if (__bb.ice_isA(ice_staticId())) {
                    PublisherPrxHelper __h = new PublisherPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            } catch (Ice.FacetNotExistException ex) {
            }
        }
        return __d;
    }

    public static PublisherPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx) {
        PublisherPrx __d = null;
        if (__obj != null) {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try {
                if (__bb.ice_isA(ice_staticId(), __ctx)) {
                    PublisherPrxHelper __h = new PublisherPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            } catch (Ice.FacetNotExistException ex) {
            }
        }
        return __d;
    }

    public static PublisherPrx uncheckedCast(Ice.ObjectPrx __obj) {
        PublisherPrx __d = null;
        if (__obj != null) {
            if (__obj instanceof PublisherPrx) {
                __d = (PublisherPrx) __obj;
            } else {
                PublisherPrxHelper __h = new PublisherPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PublisherPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet) {
        PublisherPrx __d = null;
        if (__obj != null) {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PublisherPrxHelper __h = new PublisherPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
            {
                    "::Ice::Object",
                    "::middleware::Publisher"
            };

    public static String ice_staticId() {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM() {
        return new _PublisherDelM();
    }

    protected Ice._ObjectDelD __createDelegateD() {
        return new _PublisherDelD();
    }

    public static void __write(IceInternal.BasicStream __os, PublisherPrx v) {
        __os.writeProxy(v);
    }

    public static PublisherPrx __read(IceInternal.BasicStream __is) {
        Ice.ObjectPrx proxy = __is.readProxy();
        if (proxy != null) {
            PublisherPrxHelper result = new PublisherPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
