// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `middleware.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.asprotunity.exchange.middleware;

public final class _PublisherDelD extends Ice._ObjectDelD implements _PublisherDel {
    public Event queryLatestEvent(final String security, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
            throws IceInternal.LocalExceptionWrapper {
        final Ice.Current __current = new Ice.Current();
        __initCurrent(__current, "queryLatestEvent", Ice.OperationMode.Normal, __ctx);
        final EventHolder __result = new EventHolder();
        IceInternal.Direct __direct = null;
        try {
            __direct = new IceInternal.Direct(__current) {
                public Ice.DispatchStatus run(Ice.Object __obj) {
                    Publisher __servant = null;
                    if (__obj == null || __obj instanceof Publisher) {
                        __servant = (Publisher) __obj;
                    } else {
                        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
                    }
                    __result.value = __servant.queryLatestEvent(security, __current);
                    return Ice.DispatchStatus.DispatchOK;
                }
            };
            try {
                Ice.DispatchStatus __status = __direct.getServant().__collocDispatch(__direct);
                if (__status == Ice.DispatchStatus.DispatchUserException) {
                    __direct.throwUserException();
                }
                assert __status == Ice.DispatchStatus.DispatchOK;
                return __result.value;
            } finally {
                __direct.destroy();
            }
        } catch (Ice.SystemException __ex) {
            throw __ex;
        } catch (java.lang.Throwable __ex) {
            IceInternal.LocalExceptionWrapper.throwWrapper(__ex);
        }
        return __result.value;
    }

    public void subscribe(final SubscriberPrx sub, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
            throws IceInternal.LocalExceptionWrapper {
        final Ice.Current __current = new Ice.Current();
        __initCurrent(__current, "subscribe", Ice.OperationMode.Normal, __ctx);
        IceInternal.Direct __direct = null;
        try {
            __direct = new IceInternal.Direct(__current) {
                public Ice.DispatchStatus run(Ice.Object __obj) {
                    Publisher __servant = null;
                    if (__obj == null || __obj instanceof Publisher) {
                        __servant = (Publisher) __obj;
                    } else {
                        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
                    }
                    __servant.subscribe(sub, __current);
                    return Ice.DispatchStatus.DispatchOK;
                }
            };
            try {
                Ice.DispatchStatus __status = __direct.getServant().__collocDispatch(__direct);
                if (__status == Ice.DispatchStatus.DispatchUserException) {
                    __direct.throwUserException();
                }
                assert __status == Ice.DispatchStatus.DispatchOK;
            } finally {
                __direct.destroy();
            }
        } catch (Ice.SystemException __ex) {
            throw __ex;
        } catch (java.lang.Throwable __ex) {
            IceInternal.LocalExceptionWrapper.throwWrapper(__ex);
        }
    }

    public void unsubscribe(final SubscriberPrx sub, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
            throws IceInternal.LocalExceptionWrapper {
        final Ice.Current __current = new Ice.Current();
        __initCurrent(__current, "unsubscribe", Ice.OperationMode.Normal, __ctx);
        IceInternal.Direct __direct = null;
        try {
            __direct = new IceInternal.Direct(__current) {
                public Ice.DispatchStatus run(Ice.Object __obj) {
                    Publisher __servant = null;
                    if (__obj == null || __obj instanceof Publisher) {
                        __servant = (Publisher) __obj;
                    } else {
                        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
                    }
                    __servant.unsubscribe(sub, __current);
                    return Ice.DispatchStatus.DispatchOK;
                }
            };
            try {
                Ice.DispatchStatus __status = __direct.getServant().__collocDispatch(__direct);
                if (__status == Ice.DispatchStatus.DispatchUserException) {
                    __direct.throwUserException();
                }
                assert __status == Ice.DispatchStatus.DispatchOK;
            } finally {
                __direct.destroy();
            }
        } catch (Ice.SystemException __ex) {
            throw __ex;
        } catch (java.lang.Throwable __ex) {
            IceInternal.LocalExceptionWrapper.throwWrapper(__ex);
        }
    }
}
