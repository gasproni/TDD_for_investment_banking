// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `middleware.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.asprotunity.exchange.middleware;

public final class SubscriberPrxHelper extends Ice.ObjectPrxHelperBase implements SubscriberPrx {
    private static final String __notifyEvent_name = "notifyEvent";

    public void notifyEvent(Event ev) {
        notifyEvent(ev, null, false);
    }

    public void notifyEvent(Event ev, java.util.Map<String, String> __ctx) {
        notifyEvent(ev, __ctx, true);
    }

    private void notifyEvent(Event ev, java.util.Map<String, String> __ctx, boolean __explicitCtx) {
        if (__explicitCtx && __ctx == null) {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "notifyEvent", __ctx);
        int __cnt = 0;
        try {
            while (true) {
                Ice._ObjectDel __delBase = null;
                try {
                    __delBase = __getDelegate(false);
                    _SubscriberDel __del = (_SubscriberDel) __delBase;
                    __del.notifyEvent(ev, __ctx, __observer);
                    return;
                } catch (IceInternal.LocalExceptionWrapper __ex) {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                } catch (Ice.LocalException __ex) {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        } finally {
            if (__observer != null) {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_notifyEvent(Event ev) {
        return begin_notifyEvent(ev, null, false, null);
    }

    public Ice.AsyncResult begin_notifyEvent(Event ev, java.util.Map<String, String> __ctx) {
        return begin_notifyEvent(ev, __ctx, true, null);
    }

    public Ice.AsyncResult begin_notifyEvent(Event ev, Ice.Callback __cb) {
        return begin_notifyEvent(ev, null, false, __cb);
    }

    public Ice.AsyncResult begin_notifyEvent(Event ev, java.util.Map<String, String> __ctx, Ice.Callback __cb) {
        return begin_notifyEvent(ev, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_notifyEvent(Event ev, Callback_Subscriber_notifyEvent __cb) {
        return begin_notifyEvent(ev, null, false, __cb);
    }

    public Ice.AsyncResult begin_notifyEvent(Event ev, java.util.Map<String, String> __ctx, Callback_Subscriber_notifyEvent __cb) {
        return begin_notifyEvent(ev, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_notifyEvent(Event ev, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb) {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __notifyEvent_name, __cb);
        try {
            __result.__prepare(__notifyEvent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ev.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        } catch (Ice.LocalException __ex) {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_notifyEvent(Ice.AsyncResult __result) {
        __end(__result, __notifyEvent_name);
    }

    public static SubscriberPrx checkedCast(Ice.ObjectPrx __obj) {
        SubscriberPrx __d = null;
        if (__obj != null) {
            if (__obj instanceof SubscriberPrx) {
                __d = (SubscriberPrx) __obj;
            } else {
                if (__obj.ice_isA(ice_staticId())) {
                    SubscriberPrxHelper __h = new SubscriberPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SubscriberPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx) {
        SubscriberPrx __d = null;
        if (__obj != null) {
            if (__obj instanceof SubscriberPrx) {
                __d = (SubscriberPrx) __obj;
            } else {
                if (__obj.ice_isA(ice_staticId(), __ctx)) {
                    SubscriberPrxHelper __h = new SubscriberPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SubscriberPrx checkedCast(Ice.ObjectPrx __obj, String __facet) {
        SubscriberPrx __d = null;
        if (__obj != null) {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try {
                if (__bb.ice_isA(ice_staticId())) {
                    SubscriberPrxHelper __h = new SubscriberPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            } catch (Ice.FacetNotExistException ex) {
            }
        }
        return __d;
    }

    public static SubscriberPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx) {
        SubscriberPrx __d = null;
        if (__obj != null) {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try {
                if (__bb.ice_isA(ice_staticId(), __ctx)) {
                    SubscriberPrxHelper __h = new SubscriberPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            } catch (Ice.FacetNotExistException ex) {
            }
        }
        return __d;
    }

    public static SubscriberPrx uncheckedCast(Ice.ObjectPrx __obj) {
        SubscriberPrx __d = null;
        if (__obj != null) {
            if (__obj instanceof SubscriberPrx) {
                __d = (SubscriberPrx) __obj;
            } else {
                SubscriberPrxHelper __h = new SubscriberPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SubscriberPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet) {
        SubscriberPrx __d = null;
        if (__obj != null) {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SubscriberPrxHelper __h = new SubscriberPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
            {
                    "::Ice::Object",
                    "::middleware::Subscriber"
            };

    public static String ice_staticId() {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM() {
        return new _SubscriberDelM();
    }

    protected Ice._ObjectDelD __createDelegateD() {
        return new _SubscriberDelD();
    }

    public static void __write(IceInternal.BasicStream __os, SubscriberPrx v) {
        __os.writeProxy(v);
    }

    public static SubscriberPrx __read(IceInternal.BasicStream __is) {
        Ice.ObjectPrx proxy = __is.readProxy();
        if (proxy != null) {
            SubscriberPrxHelper result = new SubscriberPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
